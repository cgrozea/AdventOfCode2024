import aoc.
import util.
import cp.

op("OR",X,Y)=R=>R=X\/Y.
op("AND",X,Y)=R=>R=X/\Y.
op("XOR",X,Y)=R=>R=X^Y.

%table(+,+,-)
e(M,X,R)=>
L=M.get(X),
%p(dbg={X,L}),
if L=[R] then
true
else
L=[Op,T1,T2],
e(M,T1,V1),
e(M,T2,V2),
R=op(Op,V1,V2).

main([F|T])=>
A=[X.split(": "): X in read_file_lines(F)]
,pp(A)
,M=new_map()
,W=new_set()
,foreach(L in A,L.length=2)
    M.put(L[1],[L[2].to_int]),
    W.put(L[1])
end
,foreach(L in A,L.length=5)
    if M.has_key(L[5]) then
        p("duplicate"),
        exit(0)
    end,
    M.put(L[5],[L[2],L[1],L[3]]),
    W.put(L[5]),
    W.put(L[1]),
    W.put(L[3])
end
%,p(W.keys.sort)
%,p(M.values.sort)
%,e(M,"z00",R),p(R)
,E=[{X,R}:X in W.keys,X[1]='z',e(M,X,R)].sort
,p([R*2**(I-1):I in 1..E.length,{X,R}=E[I]].sum)
.
