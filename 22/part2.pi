import aoc.

%steps(A,0,R)=>R=A.
%steps(A,N,R)=>step(A,A2),steps(A2,N-1,R).

seq(L,X)=R,L=[A,B,C,D]=>R=[B,C,D,X].

steps(A,N)=Seen=>
p(n=A),
Seen=new_map(),
B=d(A),
%p(B),
L=[0,0,0,0],
foreach(I in 1..N),
step(A,A2),
C:=A2.d-B,
A:=A2,
B:=A2.d,
if I>=5 then
    L:=seq(L,C)
    else
    L[I]:=C
end,

if I>=4 then 
    %p({L,B}),
    if not Seen.has_key(L) then 
        Seen.put(L,B)
    end
end
end,
%foreach (X in Seen.keys)
%p({X=Seen.get(X)})
%end,
p(present=Seen.get([-2,1,-1,3],-99))
.

d(A)=R=>R=A mod 10.

mix(A,B)=C=>C=A ^ B.
prune(A)=B=>B=A mod 16777216.
s1(A,B)=>B=mix(A,A*64).prune.
s2(A,B)=>B=mix(A,A//32).prune.
s3(A,B)=>B=mix(A,A*2048).prune.
step(A,B)=>s1(A,A2),s2(A2,A3),s3(A3,B).

pro(L,N)=Seq=>
Q=[steps(X,N):X in L],
A=Q[1],
foreach(B in tail(Q))
    foreach(K in B.keys)
        A.put(K,A.get(K,0)+B.get(K)) 
    end
end,
MX=A.values.max,
Seq=[K:K in A.keys,A.get(K)=MX],
p({s=Seq,mx=MX})
.

main([F,N0])=>
A=rim(F)
,p({A.length})
,N=N0.to_int
,L=[X[1]:X in A]
,p(L)
%,p({mix(42,15),100000000.prune})
%,steps(123,N)
%,p([R:X in L,steps(X,N,R)].sum)
,p(pro(L,N))
.
